{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"weather.ipynb のコピー","provenance":[{"file_id":"1hRm7GPc-pWesAaalln9tSXFzv_G6QO7U","timestamp":1569054501695}],"collapsed_sections":["mCxZLjwNaRbt","FZ8XqcntaFC5"]},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"TPU"},"cells":[{"cell_type":"markdown","metadata":{"id":"7QbaVUnWpxoB","colab_type":"text"},"source":["## データの読み込み"]},{"cell_type":"code","metadata":{"id":"Lg12JOXLqt_R","colab_type":"code","outputId":"7a7594f3-ff6f-41eb-a715-e9be278f1f5b","executionInfo":{"status":"ok","timestamp":1569048379872,"user_tz":-540,"elapsed":1130,"user":{"displayName":"武藤熙麟","photoUrl":"","userId":"16762842130569802091"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["from google.colab import drive\n","drive.mount('/content/drive')"],"execution_count":78,"outputs":[{"output_type":"stream","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"p3eExY6qpO6r","colab_type":"code","colab":{}},"source":["import pandas as pd\n","data_directory = \"drive/My Drive/research2019/2019/AI/\"\n","# !ls \"drive/My Drive/research2019/2019/AI/\"\n","\n","heatstroke = pd.read_csv(data_directory + 'heatstroke-2018.csv', encoding='utf-8')\n","weather = pd.read_csv(data_directory + 'weather-tokyo.csv', encoding='utf-8')\n","\n","# print(heatstroke)\n","# print(weather)"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"s4U4byFuLSgC","colab_type":"text"},"source":["## データ前処理"]},{"cell_type":"markdown","metadata":{"id":"PIaiEl9Wovhz","colab_type":"text"},"source":["### データの抽出 & 合成"]},{"cell_type":"code","metadata":{"id":"KsXmyEhz36RF","colab_type":"code","outputId":"01d07441-b781-45a6-9764-bc65e59cfe64","executionInfo":{"status":"ok","timestamp":1569048386254,"user_tz":-540,"elapsed":1159,"user":{"displayName":"武藤熙麟","photoUrl":"","userId":"16762842130569802091"}},"colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["# 必要な部分の抽出\n","heatstroke_tokyo = heatstroke.query('都道府県コード == 13')\n","heatstroke_tokyo = heatstroke_tokyo.drop('都道府県コード', axis=1)\n","heatstroke_tokyo = heatstroke_tokyo.iloc[:,0:2]\n","\n","# 列名称の変更\n","weather = weather.rename(columns={'年月日': '日付'})\n","heatstroke_tokyo  = heatstroke_tokyo.rename(columns={'搬送人員（計）': '人数'})\n","\n","# 合成\n","data = pd.merge(weather, heatstroke_tokyo, on='日付')\n","\n","data = data.drop('日付', axis=1)\n","print(data.info())\n","print(data)"],"execution_count":80,"outputs":[{"output_type":"stream","text":["<class 'pandas.core.frame.DataFrame'>\n","Int64Index: 153 entries, 0 to 152\n","Data columns (total 8 columns):\n","平均気温     153 non-null float64\n","最高気温     153 non-null float64\n","最低気温     153 non-null float64\n","平均蒸気圧    153 non-null float64\n","平均雲量     153 non-null float64\n","降水量      153 non-null float64\n","平均風速     153 non-null float64\n","人数       153 non-null int64\n","dtypes: float64(7), int64(1)\n","memory usage: 10.8 KB\n","None\n","     平均気温  最高気温  最低気温  平均蒸気圧  平均雲量   降水量  平均風速  人数\n","0    22.3  28.1  16.7   15.1   4.8   0.0   2.9  16\n","1    20.4  25.3  17.1   18.5  10.0   3.5   3.2   0\n","2    21.9  27.4  16.8   20.2  10.0  14.0   6.2   4\n","3    18.0  23.8  13.2   10.6   3.5   0.0   3.8   1\n","4    18.3  24.3  11.5   10.8   1.8   0.0   3.3   5\n","5    21.0  26.5  14.4   13.4   9.8   0.0   4.5   3\n","6    17.9  21.6  13.9   16.8  10.0  21.0   4.3   0\n","7    12.9  14.6  11.4   13.6  10.0  10.5   3.1   0\n","8    12.1  14.3  10.3   12.6  10.0  35.0   2.9   0\n","9    12.1  15.8  10.0   11.9   6.3   9.0   1.8   0\n","10   16.4  22.4   9.0   11.8   7.3   0.0   3.7   3\n","11   18.8  24.6  12.9   15.5   6.5   0.0   2.8   3\n","12   17.9  21.4  14.6   17.2  10.0  49.0   3.4   1\n","13   21.1  28.6  15.2   14.1   3.0   0.0   2.9   4\n","14   22.3  28.4  14.8   14.8   2.0   0.0   3.6  11\n","15   23.5  29.0  18.8   17.0   5.8   0.0   4.3  10\n","16   24.0  28.4  21.4   21.0   9.0   0.0   3.7  15\n","17   23.4  27.1  20.0   23.4   7.8   0.0   3.0   8\n","18   21.5  26.3  15.3   18.4   7.5   0.0   3.9   3\n","19   16.8  22.1  13.1    9.6   4.3   0.0   3.5   3\n","20   20.3  27.2  13.7   10.8  10.0   0.0   2.4   4\n","21   21.0  27.3  15.0   13.3   0.3   0.0   3.1   3\n","22   18.6  22.0  17.0   18.0  10.0   9.0   2.3   2\n","23   20.7  25.7  16.1   19.6   6.0   6.0   2.8   1\n","24   22.8  27.1  18.7   19.8   8.3   0.0   3.7   8\n","25   21.4  25.2  18.0   16.0   9.8   0.0   2.7   4\n","26   21.3  26.9  16.2   18.1   3.3   0.0   2.9  15\n","27   21.6  26.0  18.8   19.6  10.0   0.0   2.5   3\n","28   23.0  27.6  19.3   20.2  10.0   0.0   3.2   8\n","29   21.1  25.0  17.4   21.3  10.0   8.5   2.6   3\n","..    ...   ...   ...    ...   ...   ...   ...  ..\n","123  25.9  31.4  21.0   28.6   8.5   6.0   2.5  19\n","124  22.1  23.7  20.7   25.4  10.0   7.5   2.0   5\n","125  23.6  26.1  22.0   27.8  10.0   4.0   1.8   3\n","126  26.5  28.7  22.8   31.0  10.0  14.5   5.9   2\n","127  27.6  32.0  22.5   27.2   6.5   8.5   6.6  10\n","128  27.6  31.5  24.8   24.5   8.8   0.0   3.7   9\n","129  27.5  30.4  24.9   27.7   9.3   0.0   5.4   8\n","130  28.8  33.0  26.3   29.1   8.3   0.0   5.3  21\n","131  28.3  32.1  26.1   28.9   8.3   0.0   4.9  27\n","132  25.5  30.6  21.4   28.7  10.0  38.5   3.6   8\n","133  21.4  23.9  19.3   20.6  10.0   4.0   3.7   3\n","134  21.0  24.4  18.1   17.2   9.5   0.0   2.9   2\n","135  22.4  27.3  18.5   21.0  10.0   0.0   2.1   3\n","136  21.9  24.9  19.9   24.4  10.0   7.5   2.0   2\n","137  20.5  22.2  19.1   24.1  10.0  14.5   1.5   1\n","138  23.1  27.4  20.1   25.0   8.8   0.0   1.8   1\n","139  24.7  31.2  21.1   26.3   9.5  26.0   2.3  11\n","140  23.3  28.1  20.3   24.7   7.8  40.5   2.7   2\n","141  22.2  27.4  18.2   18.8   7.3   0.0   2.8   3\n","142  19.9  24.0  15.4   19.6  10.0  40.5   2.1   2\n","143  17.7  19.0  15.6   20.3  10.0  36.0   3.5   0\n","144  21.5  25.8  18.7   24.1   8.5   0.0   1.2   0\n","145  24.5  28.4  21.8   23.1   9.3   0.0   2.3   6\n","146  24.4  28.6  21.2   25.6   9.8   1.5   2.0   4\n","147  21.3  25.2  18.6   24.1  10.0  14.5   2.5   1\n","148  17.7  19.9  15.7   19.5  10.0  38.5   2.5   0\n","149  15.9  17.5  14.7   17.8  10.0  19.0   2.9   1\n","150  19.7  26.0  14.1   17.0   1.5   0.0   2.1   2\n","151  18.8  21.3  17.2   20.7  10.0   9.5   2.1   0\n","152  20.4  27.0  16.9   23.5  10.0  34.0   3.5   1\n","\n","[153 rows x 8 columns]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"uNDRVWmqLlED","colab_type":"text"},"source":["### 標準化"]},{"cell_type":"code","metadata":{"id":"vBVoHlttMZiK","colab_type":"code","outputId":"ebc77012-592d-49fe-cf7a-c788853db983","executionInfo":{"status":"ok","timestamp":1569048388106,"user_tz":-540,"elapsed":1004,"user":{"displayName":"武藤熙麟","photoUrl":"","userId":"16762842130569802091"}},"colab":{"base_uri":"https://localhost:8080/","height":351}},"source":["import numpy as np\n","pd.set_option(\"display.max_columns\", 80)\n","print(data.describe())\n","\n","data = data.astype('float32')\n","\n","data_np = data.values\n","# 標準化\n","def zscore(x, axis = None):\n","  xmean = x.mean(axis=axis, keepdims=True)\n","  xstd  = np.std(x, axis=axis, keepdims=True)\n","  zscore = (x-xmean)/xstd\n","  return zscore\n","data_np = zscore(data_np, axis=0)"],"execution_count":81,"outputs":[{"output_type":"stream","text":["             平均気温        最高気温        最低気温       平均蒸気圧        平均雲量         降水量  \\\n","count  153.000000  153.000000  153.000000  153.000000  153.000000  153.000000   \n","mean    24.292157   28.627451   20.816993   24.039216    7.922222    5.748366   \n","std      4.426944    4.956949    4.549404    6.232800    2.568284   11.703172   \n","min     12.100000   14.300000    9.000000    9.600000    0.000000    0.000000   \n","25%     21.100000   25.200000   17.800000   19.500000    6.500000    0.000000   \n","50%     23.700000   28.600000   20.700000   24.100000    9.000000    0.000000   \n","75%     28.200000   32.700000   25.100000   29.800000   10.000000    4.500000   \n","max     32.200000   39.000000   28.500000   33.300000   10.000000   52.000000   \n","\n","             平均風速          人数  \n","count  153.000000  153.000000  \n","mean     3.288235   51.261438  \n","std      1.237141   83.994969  \n","min      1.200000    0.000000  \n","25%      2.500000    3.000000  \n","50%      2.900000   10.000000  \n","75%      3.700000   58.000000  \n","max      7.400000  406.000000  \n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"m3quqaFEJxnh","colab_type":"text"},"source":["### 練習用・訓練用に分ける"]},{"cell_type":"code","metadata":{"id":"xDiQw_N16U-K","colab_type":"code","outputId":"e90e350f-ff9f-40fd-debb-813b5da1e9f2","executionInfo":{"status":"ok","timestamp":1569050417309,"user_tz":-540,"elapsed":506,"user":{"displayName":"武藤熙麟","photoUrl":"","userId":"16762842130569802091"}},"colab":{"base_uri":"https://localhost:8080/","height":52}},"source":["from sklearn.model_selection import train_test_split\n","rate = 0.9\n","X = data_np[:,0:-1]\n","Y = data_np[:,-1]\n","Y = Y.reshape((len(Y), 1))\n","X_train, X_test, Y_train, Y_test = train_test_split(X, Y, train_size = int(len(X) * rate))\n","\n","print('X_train num: ', len(X_train))\n","print('X_test num: ', len(X_test))"],"execution_count":100,"outputs":[{"output_type":"stream","text":["X_train num:  137\n","X_test num:  16\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"txpEkkhXU06L","colab_type":"text"},"source":["## モデルの構築"]},{"cell_type":"code","metadata":{"id":"_l6idD1wU3K6","colab_type":"code","colab":{}},"source":["from keras.models import Sequential\n","from keras.layers import Dense\n","import tensorflow as tf\n","import sklearn\n","import matplotlib.pyplot as plt\n","\n","\n","# %matplotlib inline\n","class DNN(object):\n","  def __init__(self, n_in, n_hiddens, n_out):\n","    self.n_in = n_in\n","    self.n_hiddens = n_hiddens\n","    self.n_out = n_out\n","    self.weights = []\n","    self.biases = []\n","    self._x = None\n","    self._y = None\n","    self._t = None\n","    self._rate = None\n","    self._sess = None\n","    self._history = {\n","        'accuracy': [],\n","        'loss': []\n","    }\n","    self.y_dim = None\n","    self.loss_name = None\n","    self.activation_name = None\n","    self.optimizer_name = None\n","    self.loss_names = ['cross entropy', 'mean squared error']\n","    self.activation_names = ['relu','leaky relu', 'relu6', 'tanh', 'sigmoid']\n","    self.optimizer_names = ['Adam', 'Adadelta', 'Adagrad', 'Ftrl', 'RMSProp', 'GradientDescent']\n","\n","  class EarlyStopping:\n","    def __init__(self, patience=0, verbose=0):\n","      self._step = 0\n","      self._loss = float('inf')\n","      self.patience = patience\n","      self.verbose = verbose\n","\n","    def validate(self, loss):\n","      if self._loss < loss:\n","        self._step += 1\n","        if self._step > self.patience:\n","          if self.verbose == 1 or self.verbose == 3:\n","            print('early stopping')\n","          return True\n","      else:\n","        self._step = 0\n","        self._loss = loss\n","      return False\n","\n","  def get_activation_name(self, num):\n","    return self.activation_names[num]\n","  \n","  def get_activation_names_num(self):\n","    return len(self.activation_names)\n","\n","  def get_optimizer_name(self, num):\n","    return self.optimizer_names[num]\n","\n","  def get_optimizer_names_num(self):\n","    return len(self.optimizer_names)\n","  \n","  def get_loss_name(self, num):\n","    return self.loss_names[num]\n","\n","  def get_loss_names_num(self):\n","    return len(self.loss_names)\n","\n","  # weightを-0.01～0.01の間で設定\n","  def weight_variable(self, shape):\n","    # Tensorを正規分布かつ標準偏差の2倍の間に収まるような乱数を生成する\n","    # stddev = 値の範囲(+-)\n","    initial = tf.truncated_normal(shape, stddev=0.01)\n","    return tf.Variable(initial)\n","    # sess = tf.Session)\n","    # val = sess.run(initial)\n","    # print(val)\n","\n","  # biasを0に設定\n","  def bias_variable(self, shape):\n","    initial = tf.zeros(shape)\n","    return tf.Variable(initial)\n","\n","  # modelの定義\n","  def inference(self, x, rate):\n","    # 各層ごとに、weight, bias, dropoutを設定する\n","    for i, n_hidden in enumerate(self.n_hiddens):\n","      if i == 0:\n","        # 入力層 - 隠れ層\n","        input_data = x\n","        input_dim = self.n_in\n","      else:\n","        # 隠れ層 - 隠れ層\n","        input_data = output\n","        input_dim = self.n_hiddens[i-1]\n","      \n","      # weightとbiasを設定\n","      # [前の層のニューロン数, 現在の層のニューロン数]\n","      self.weights.append(self.weight_variable([input_dim, n_hidden]))\n","      self.biases.append(self.bias_variable([n_hidden]))\n","\n","      # relu関数を設定\n","      if self.activation_name == 'relu':\n","        layer = tf.nn.relu(tf.matmul(input_data, self.weights[-1]) + self.biases[-1])\n","      elif self.activation_name == 'sigmoid':\n","        layer = tf.nn.sigmoid(tf.matmul(input_data, self.weights[-1]) + self.biases[-1])\n","      elif self.activation_name == 'tanh':\n","        layer = tf.nn.tanh(tf.matmul(input_data, self.weights[-1]) + self.biases[-1])\n","      elif self.activation_name == 'leaky relu':\n","        layer = tf.nn.tanh(tf.matmul(input_data, self.weights[-1]) + self.biases[-1])\n","      elif self.activation_name == 'relu6':\n","        layer = tf.nn.relu6(tf.matmul(input_data, self.weights[-1]) + self.biases[-1])\n","      else:\n","        raise ValueError('Error: ' + self.activation + 'is not correct name')\n","      # dropoutを設定\n","      output = tf.nn.dropout(layer, rate=rate)\n","    \n","    # 隠れ層 - 出力層\n","    self.weights.append(self.weight_variable([self.n_hiddens[-1], self.n_out]))\n","    self.biases.append(self.bias_variable([self.n_out]))\n","\n","    # softmax関数を設定\n","    y = tf.nn.softmax(tf.matmul(\n","        output, self.weights[-1]) + self.biases[-1])\n","    return y\n","\n","  def loss(self, y, t):\n","    # todo: reduction_indices deprecated; use axis\n","    if self.loss_name == 'cross_entropy':\n","      cost = tf.reduce_mean(-tf.reduce_sum(t * tf.log(y), reduction_indices=[1]))\n","    elif self.loss_name == 'mean squared error':\n","      cost = tf.losses.mean_squared_error(labels=t, predictions=y)\n","    else:\n","      raise ValueError('Error: ' + self.loss_name + ' is invalid')\n","    return cost \n","\n","  def training(self, loss, learn_rate):\n","    optimizer = None\n","    if self.optimizer_name == 'GradientDescent':\n","      optimizer = tf.train.GradientDescentOptimizer(learning_rate=learn_rate)\n","    elif self.optimizer_name == 'Adadelta':\n","      optimizer = tf.train.AdadeltaOptimizer(learning_rate=learn_rate)\n","    elif self.optimizer_name == 'Adagrad':\n","      optimizer = tf.train.AdagradOptimizer(learning_rate=learn_rate)\n","    elif self.optimizer_name == 'Adam':\n","      optimizer = tf.train.AdamOptimizer(learning_rate=learn_rate)\n","    elif self.optimizer_name == 'Ftrl':\n","      optimizer = tf.train.FtrlOptimizer(learning_rate=learn_rate)\n","    elif self.optimizer_name == 'RMSProp':\n","      optimizer = tf.train.RMSPropOptimizer(learning_rate=learn_rate)\n","    else:\n","      raise ValueError('optimzier name ' + self.optimizer_name + 'is not defined')\n","    train_step = optimizer.minimize(loss)\n","    return train_step\n","  \n","  def accuracy(self, y, t):\n","    if self.n_dim == 1:\n","      # 出力が1つの値の場合\n","      accuracy = tf.reduce_mean(tf.square(y - t))\n","    else:\n","      # 出力が、分類の場合\n","      # 計算結果と、実際のデータが同じか\n","      # argmax(input, axis) inputのaxis方向の中で、最大の値を持つ添字(要検証)を返す\n","      # 複数のデータに対して、equalをしている(要検証)\n","      correct_prediction = tf.equal(tf.argmax(y, 1), tf.argmax(t, 1))\n","      # 複数のデータの正誤情報をもとに、正答率を調べている(要検証)\n","      # tf.cast(変換したいもの, 変換後の型)\n","      # tf.reduce_mean() 与えたリストに入っている数値の平均値を求める\n","      accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))\n","    return accuracy\n","  \n","  def compile(self, loss='cross entropy', optimizer='Adam', activation='relu'):\n","    self.loss_name = loss\n","    if type(self.loss_name) == int:\n","      if self.loss_name < 0 or self.loss_name >= self.get_loss_names_num():\n","        raise ValueError('loss index', self.loss_name, 'is invalid')\n","      self.loss_name = self.get_loss_name(self.loss_name)\n","    elif not self.loss_name in self.loss_names:\n","        raise ValueError('loss name ' + self.loss_name + ' is invalid')\n","\n","    self.optimizer_name = optimizer\n","    if type(self.optimizer_name) == int:\n","      if self.optimizer_name < 0 or self.optimizer_name >= self.get_optimizer_names_num():\n","        raise ValueError('optimizer index', self.optimizer_name, 'is invalid')\n","      self.optimizer_name = self.get_optimizer_name(self.optimizer_name)\n","    elif not self.optimizer_name in self.optimizer_names:\n","      raise ValueError('optimizer name ' + self.optimizer_name + ' is invalid')\n","\n","    self.activation_name = activation\n","    if type(self.activation_name) == int:\n","      if self.activation_name < 0 or self.activation_name >= self.get_activation_names_num():\n","        raise ValueError('activation index', self.activation_name, 'is invalid')\n","      self.activation_name = self.get_activation_name(self.activation_name)\n","    elif not self.activation_name in self.activation_names:\n","      raise ValueError('activation name ' + self.activation_name + 'is invalid')\n","\n","\n","  def fit(self, X_train, Y_train, epochs=100, batch_size=100, rate=0.5, verbose=1, learn_rate=0.01):\n","    if verbose == 1 or verbose == 3:\n","      print('train data num: ',  len(X_train))\n","      print('input data shape: ', X_train.shape)\n","      print('output data shape: ', Y_train.shape)\n","    \n","    early_stopping = self.EarlyStopping(patience=5, verbose=1)\n","    x = tf.placeholder(tf.float32, shape=[None, self.n_in])  # 入力\n","    t = tf.placeholder(tf.float32, shape=[None, self.n_out]) # 出力\n","    dropout_rate = tf.placeholder(tf.float32)                   # dropout\n","\n","    self.n_dim = self.n_out\n","    # evaluate() 用に保持\n","    self._x = x\n","    self._t = t\n","    self._rate = dropout_rate\n","\n","    y = self.inference(x, rate)\n","    loss = self.loss(y, t)\n","    train_step = self.training(loss, learn_rate)\n","    accuracy = self.accuracy(y, t)\n","    \n","    init = tf.global_variables_initializer()\n","    sess = tf.Session()\n","    sess.run(init)\n","    \n","    # evalueate() 用に保持\n","    self._y = y\n","    self._sess = sess\n","\n","    N_train = len(X_train)\n","    n_batches = N_train // batch_size\n","\n","    for epoch in range(epochs):\n","      X_, Y_ = sklearn.utils.shuffle(X_train, Y_train)\n","\n","      for i in range(n_batches):\n","        start = i * batch_size\n","        end = start + batch_size\n","        sess.run(train_step, feed_dict={\n","            x: X_[start:end],\n","            t: Y_[start:end],\n","            dropout_rate: rate\n","        })\n","\n","      loss_ = loss.eval(session=sess, feed_dict={\n","          x: X_train,\n","          t: Y_train,\n","          dropout_rate: 1.0\n","      })\n","      accuracy_ = accuracy.eval(session=sess, feed_dict={\n","          x: X_train,\n","          t: Y_train,\n","          dropout_rate: 1.0\n","      })\n","\n","\n","      # 値を保存しておく\n","      \n","      self._history['loss'].append(loss_)\n","      self._history['accuracy'].append(accuracy_)\n","\n","      if verbose == 2 or verbose == 3:\n","        print('epoch:', epoch,\n","              ' loss:', loss_,\n","              ' accuracy', accuracy_)\n","\n","      if early_stopping.validate(loss_):\n","        epochs = epoch + 1 \n","        break\n","    \n","    if verbose:\n","      fig = plt.figure()\n","\n","      ax_acc = fig.add_subplot(111)\n","      ax_acc.plot(range(epochs), self._history['accuracy'], label='acc', color='red')\n","\n","      ax_loss = ax_acc.twinx()\n","      ax_loss.plot(range(epochs), self._history['loss'], label='loss', color='black')\n","      plt.xlabel('epochs')\n","      plt.show()\n","\n","    return self._history\n","  \n","  def evaluate(self, X_test, Y_test):\n","    accuracy = self.accuracy(self ._y, self._t)\n","    return accuracy.eval(session=self._sess, feed_dict={\n","        self._x: X_test,\n","        self._t: Y_test,\n","        self._rate: 1.0\n","    })\n","  def predict(self, X_data):\n","    pass"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"1OxRk9DDDMRI","colab_type":"code","outputId":"1c1e96d9-cd9d-4ab6-9ce1-9f7229b5ac76","executionInfo":{"status":"ok","timestamp":1569053728309,"user_tz":-540,"elapsed":3277,"user":{"displayName":"武藤熙麟","photoUrl":"","userId":"16762842130569802091"}},"colab":{"base_uri":"https://localhost:8080/","height":691}},"source":["# print(X_train)\n","# print(Y_train)\n","def compare(option='activation'):\n","  model = DNN(n_in=len(X_train[0]), n_hiddens=[4 for i in range(1)], n_out=len(Y[0]))\n","  loop_num = 0\n","  if option == 'activation':\n","    loop_num = model.get_activation_names_num()\n","  elif option == 'optimizer':\n","    loop_num = model.get_optimizer_names_num()\n","  elif option == 'loss':\n","    loop_num = model.get_loss_names_num()\n","  for i in range(loop_num):\n","    model = DNN(n_in=len(X_train[0]), n_hiddens=[4 for i in range(1)], n_out=len(Y[0]))\n","    if option == 'activation':\n","      print(model.get_activation_name(i))\n","      model.compile(loss='mean squared error', optimizer='Adam', activation=i)\n","    elif option == 'optimizer':\n","      print(model.get_optimizer_name(i))\n","      model.compile(loss='mean squared error', optimizer=i, activation='tanh')\n","    elif option == 'loss':\n","      print(model.get_loss_name(i))\n","      model.compile(loss=i, optimizer='Adam', activation='tanh')\n","    model.fit(X_train, Y_train, epochs=200, batch_size=32, rate=0.5, verbose=2, learn_rate=0.01)\n","    accuracy = model.evaluate(X_test, Y_test)\n","    print('accuracy; ', accuracy)\n","\n","# compare()\n","\n","model = DNN(n_in=len(X_train[0]), n_hiddens=[4 for i in range(5)], n_out=len(Y[0]))\n","model.compile(loss='mean squared error', optimizer='Adam', activation='tanh')\n","model.fit(X_train, Y_train, epochs=20, batch_size=16, rate=0.4, verbose=3, learn_rate=0.01)\n","accuracy = model.evaluate(X_test, Y_test)\n","print('accuracy: ', accuracy)"],"execution_count":131,"outputs":[{"output_type":"stream","text":["train data num:  137\n","input data shape:  (137, 7)\n","output data shape:  (137, 1)\n","epoch: 0  loss: 2.022953  accuracy 2.022953\n","epoch: 1  loss: 2.022953  accuracy 2.022953\n","epoch: 2  loss: 2.022953  accuracy 2.022953\n","epoch: 3  loss: 2.022953  accuracy 2.022953\n","epoch: 4  loss: 2.022953  accuracy 2.022953\n","epoch: 5  loss: 2.022953  accuracy 2.022953\n","epoch: 6  loss: 2.022953  accuracy 2.022953\n","epoch: 7  loss: 2.022953  accuracy 2.022953\n","epoch: 8  loss: 2.022953  accuracy 2.022953\n","epoch: 9  loss: 2.022953  accuracy 2.022953\n","epoch: 10  loss: 2.022953  accuracy 2.022953\n","epoch: 11  loss: 2.022953  accuracy 2.022953\n","epoch: 12  loss: 2.022953  accuracy 2.022953\n","epoch: 13  loss: 2.022953  accuracy 2.022953\n","epoch: 14  loss: 2.022953  accuracy 2.022953\n","epoch: 15  loss: 2.022953  accuracy 2.022953\n","epoch: 16  loss: 2.022953  accuracy 2.022953\n","epoch: 17  loss: 2.022953  accuracy 2.022953\n","epoch: 18  loss: 2.022953  accuracy 2.022953\n","epoch: 19  loss: 2.022953  accuracy 2.022953\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"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\n8CjwaWAZQFVdkuTt9E9YFbAVOKuqnkhyBHB99zITwH+rqs90r/k64L8DhwE/Bd5fVXOdUAP6h+x2\n7949rJskaUCSPVXVm2N9E/P80EBqiYEkSfM3LJBa4V9qkCQ1wUCSJDXBQJIkNcFAkiQ1wUCSJDXB\nQJIkNcFAkiQ1wUCSJDXBQJIkNcFAkiQ1wUCSJDXBQJIkNcFAkiQ1wUCSJDXBQJIkNWFoICW5LMlj\nSe6ZZf2KJNcnuTvJD5K8pWtfneTWJPcm2Zrk7IEx5yfZkWRzt5y8cB9JkjQfrczzo+whXQ6cOMf6\n84DNVfVW4HTgS137JHBuVa0BjgU+lmTNwLgLq2ptt9w4Qh2SpMVxOQ3M80MDqapuA+a67ewa4Jau\n733A4UkOqaqdVbWpa38K2AasGvZ+kqSl1co8vxDnkO4C3guQ5BjgDcChgx2SHA4cBdwx0Pzxbvfv\nsiQrFqAOSdLiWJJ5fiEC6bPAgUk2A38E3Ak8O1Dk/sC1wDlVtatrvhh4E7AW2Al8YbYXT7I+ycYk\nGycnJxegXEl6xZmYmke7Zf08xy/qPP/861TV0Eq65PtWVb1lSL8ADwJvrapdSZYB3wJuqqoL9ua1\nAXq9Xu3evXtovZKkf5RkT1X1hvQ5nDHP83u9h5TkwCTLu6cfBm7rigxwKbBtepFJVg48fQ8w45Ud\nkqTxW6p5fmKEQq4GjgcOTvII8GlgGUBVXQL8U+CKJAVsBc7qhr4D+BCwpdvNAzivu9LiL5OsBQp4\nCPjIsDokSYujlXl+pEN2rfCQnSTN3yiH7FrgX2qQJDXBQJIkNcFAkiQ1wUCSJDXBQJIkNcFAkiQ1\nwUCSJDXBQJIkNWGf+h9jkzwH/OIlDp+gf++OVlnf3rG+vWN9e6/lGverquZ3QPapQNobSTZW1bpx\n1zEb69s71rd3rG/v7Qs1tq75xJQkvTIYSJKkJrySAmnDuAsYwvr2jvXtHevbe/tCjU17xZxDkiS1\n7ZW0hyRJatjLLpCSnJjk75JsT/LJGda/Jsk13fo7ulvrLlVtq5PcmuTeJFuTnD1Dn+OTPJlkc7f8\n+VLV173/Q0m2dO+9cYb1SXJRt/3uTnL0Etb2mwPbZXOSXUnOmdZnSbdfksuSPJbknoG2g5LcnOT+\n7ueKWcae0fW5P8kZS1jfXyW5r/v3uz7JgbOMnfO7sIj1nZ9kx8C/4cmzjJ3zd30R67tmoLaHBm5M\nN33som+/l52qetkswKuBnwBHAMuBu4A10/r8IXBJ9/g04JolrG8lcHT3+ADgxzPUdzz9e8+Paxs+\nBBw8x/qTgW8DAY4F7hjjv/XPgDeMc/sB7wSOBu4ZaPtL4JPd408Cn5th3EHAA93PFd3jFUtU3wnA\nRPf4czPVN8p3YRHrOx/4xAj//nP+ri9WfdPWfwH483Ftv5fb8nLbQzoG2F5VD1TVPwBfB06Z1ucU\n4Iru8TeAd3X3hV90VbWzqjZ1j58CtgGrluK9F9ApwJXVdztwYJKVY6jjXcBPquqnY3jv51XVbcDj\n05oHv2NXAKfOMPT3gJur6vGqegK4GThxKeqrqu9U1dT/wHk7cOhCv++oZtl+oxjld32vzVVfN2+8\nH7h6od/3lerlFkirgIcHnj/Ciyf85/t0v5RPAq9bkuoGdIcKjwLumGH125PcleTbSf7ZkhYGBXwn\nyY+SrJ9h/SjbeCmcxuwTwTi3H8AhVbWze/wz4JAZ+rSyHf+A/h7vTIZ9FxbTx7tDipfNcsizhe33\nr4BHq+r+WdaPc/vtk15ugbRPSLI/cC1wTlXtmrZ6E/3DUP8C+M/A/1ji8o6rqqOBk4CPJXnnEr//\nUEmWA+8G/maG1ePefi9Q/WM3TV7KmuRT9P/UzVWzdBnXd+Fi4E3AWmAn/cNiLfoAc+8dNf+71JqX\nWyDtAFYPPD+0a5uxT5IJ4FeBv1+S6vrvuYx+GF1VVddNX19Vu6rq6e7xjcCyJAcvVX1VtaP7+Rhw\nPf1DI4NG2caL7SRgU1U9On3FuLdf59Gpw5jdz8dm6DPW7Zjk94F/A/y7LjRfZITvwqKoqker6tmq\neg74yizvO+7tNwG8F7hmtj7j2n77spdbIP0QODLJG7v/ij4NuGFanxuAqSua3gfcMtsv5ELrjjlf\nCmyrqgtm6fP6qXNaSY6h/2+0JIGZpJfkgKnH9E9+3zOt2w3A6d3VdscCTw4cnloqs/6X6Ti334DB\n79gZwDdn6HMTcEKSFd0hqRO6tkWX5ETgPwDvrqo9s/QZ5buwWPUNnpN8zyzvO8rv+mL618B9VfXI\nTCvHuf32aeO+qmKhF/pXgf2Y/hU4n+ra/oL+Lx/Ar9A/1LMd+AFwxBLWdhz9wzd3A5u75WTgo8BH\nuz4fB7bSv2roduC3l7C+I7r3vaurYWr7DdYX4Mvd9t0CrFvif98e/YD51YG2sW0/+sG4E/gl/fMY\nZ9E/J/ld4H7gfwEHdX3XAf91YOwfdN/D7cCZS1jfdvrnX6a+g1NXnf46cONc34Ulqu9r3Xfrbvoh\ns3J6fd3zF/2uL0V9XfvlU9+5gb5Lvv1ebot/qUGS1ISX2yE7SdI+ykCSJDXBQJIkNcFAkiQ1wUCS\nJDXBQJIkNcFAkiQ1wUCSJDXh/wPSP1dEeieNUAAAAABJRU5ErkJggg==\n","text/plain":["<Figure size 432x288 with 2 Axes>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["accuracy:  1.8034649\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"HVVpAzPJebik","colab_type":"code","outputId":"abb62aab-7046-4c57-dd55-ae0031ac2e0b","executionInfo":{"status":"ok","timestamp":1568980433417,"user_tz":-540,"elapsed":8433,"user":{"displayName":"武藤熙麟","photoUrl":"","userId":"16762842130569802091"}},"colab":{"base_uri":"https://localhost:8080/","height":351}},"source":["model = DNN(n_in=len(X[0]), n_hiddens=[10 for i in range(1)], n_out=len(Y[0]))\n","model.fit(X_train, Y_train, epochs=50, batch_size=30, p_keep=0.4, verbose=2, activation='tanh', learn_rate=0.01)\n","accuracy = model.evaluate(X_test, Y_test)\n","print('accuracy: ', accuracy)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["train data num:  120\n","input data shape:  (120, 4)\n","output data shape:  (120, 3)\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["accuracy:  1.0\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"iAdXhwPu5Hl-","colab_type":"code","outputId":"e6485bbc-f43d-4c6b-d96d-de95510c9e7b","executionInfo":{"status":"ok","timestamp":1568980285731,"user_tz":-540,"elapsed":7651,"user":{"displayName":"武藤熙麟","photoUrl":"","userId":"16762842130569802091"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["score = model.evaluate(X_test, Y_test)\n","print(score)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["1.0\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"ud5fOP3UWleL","colab_type":"code","colab":{}},"source":["model.fit(X_train, Y_train, batch_size=32, epochs=50, verbose=1)\n","\n","score = model.evaluate(X_test, Y_test)\n","print(score[0])\n","print(score[1])"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"kCjQTfrpXmsa","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Kt2l4hX1v6wd","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]}]}